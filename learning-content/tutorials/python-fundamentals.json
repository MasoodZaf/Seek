{
  "id": "python-fundamentals",
  "title": "Python Programming Fundamentals",
  "description": "Master the basics of Python programming language",
  "difficulty": "beginner",
  "estimatedTime": 150,
  "prerequisites": [],
  "tags": ["python", "fundamentals", "programming"],
  "author": {
    "name": "Seek Team",
    "avatar": null
  },
  "lessons": [
    {
      "id": "python-syntax-variables",
      "title": "Python Syntax and Variables",
      "description": "Learn Python syntax, variables, and data types",
      "duration": 30,
      "concepts": [
        "Python syntax rules",
        "Variables and naming",
        "Data types (int, float, str, bool)",
        "Type conversion",
        "Input and output"
      ],
      "content": {
        "text": "Python is known for its clean, readable syntax. Let's start with the basics!\n\n## Python Syntax\n\nPython uses indentation to define code blocks (unlike curly braces {} in other languages):\n\n```python\nif True:\n    print('This is indented')\n    print('This is also indented')\nprint('This is not indented')\n```\n\n## Variables\n\nIn Python, you don't need to declare variable types explicitly:\n\n```python\nname = 'Alice'  # string\nage = 25        # integer\nheight = 5.6    # float\nis_student = True  # boolean\n```\n\n## Data Types\n\n- **int**: Whole numbers (1, 2, -5)\n- **float**: Decimal numbers (3.14, -0.5)\n- **str**: Text ('hello', \"world\")\n- **bool**: True or False\n- **None**: Represents absence of value\n\n## Input and Output\n\n```python\n# Output\nprint('Hello, World!')\n\n# Input\nname = input('Enter your name: ')\nprint(f'Hello, {name}!')\n```",
        "examples": [
          {
            "title": "Variables and Data Types",
            "code": "# Different data types\nstudent_name = 'John Doe'\nstudent_age = 20\nstudent_gpa = 3.85\nis_enrolled = True\n\n# Print information\nprint(f'Student: {student_name}')\nprint(f'Age: {student_age}')\nprint(f'GPA: {student_gpa}')\nprint(f'Enrolled: {is_enrolled}')\n\n# Check data types\nprint(f'Name type: {type(student_name)}')\nprint(f'Age type: {type(student_age)}')\nprint(f'GPA type: {type(student_gpa)}')\nprint(f'Enrolled type: {type(is_enrolled)}')\n\n# Type conversion\nage_str = str(student_age)\ngpa_int = int(student_gpa)  # This will truncate\n\nprint(f'Age as string: \"{age_str}\"')\nprint(f'GPA as integer: {gpa_int}')",
            "language": "python"
          }
        ]
      },
      "exercises": [
        {
          "id": "personal-info",
          "title": "Personal Information Program",
          "description": "Create a program that collects and displays personal information",
          "starterCode": "# Personal Information Program\n# Create variables for personal information and display them\n\n# Create variables for:\n# - Full name\n# - Age\n# - Favorite number (float)\n# - Whether you like programming (boolean)\n\n# Your code here:\n\n\n# Display the information in a formatted way\n# Use f-strings for formatting\nprint('=== Personal Information ===')\n# Add your print statements here",
          "solution": "# Personal Information Program\n\n# Personal information variables\nfull_name = 'Alice Johnson'\nage = 22\nfavorite_number = 7.5\nlikes_programming = True\n\n# Display the information\nprint('=== Personal Information ===')\nprint(f'Name: {full_name}')\nprint(f'Age: {age} years old')\nprint(f'Favorite number: {favorite_number}')\nprint(f'Likes programming: {likes_programming}')\n\n# Bonus: Show data types\nprint('\\n=== Data Types ===')\nprint(f'Name is a {type(full_name).__name__}')\nprint(f'Age is a {type(age).__name__}')\nprint(f'Favorite number is a {type(favorite_number).__name__}')\nprint(f'Likes programming is a {type(likes_programming).__name__}')",
          "tests": [
            {
              "description": "Should have full_name variable",
              "code": "'full_name' in locals() and isinstance(full_name, str)"
            },
            {
              "description": "Should have age variable as integer",
              "code": "'age' in locals() and isinstance(age, int)"
            },
            {
              "description": "Should have favorite_number as float",
              "code": "'favorite_number' in locals() and isinstance(favorite_number, float)"
            }
          ]
        }
      ],
      "quiz": [
        {
          "id": "q1",
          "type": "multiple-choice",
          "question": "What is used to define code blocks in Python?",
          "options": ["Curly braces {}", "Parentheses ()", "Indentation", "Semicolons"],
          "correctAnswer": 2,
          "explanation": "Python uses indentation (spaces or tabs) to define code blocks, making the code more readable."
        }
      ]
    },
    {
      "id": "control-structures",
      "title": "Control Structures",
      "description": "Learn about if statements, loops, and control flow",
      "duration": 35,
      "concepts": [
        "if, elif, else statements",
        "Comparison operators",
        "Logical operators",
        "for loops",
        "while loops",
        "break and continue"
      ],
      "content": {
        "text": "Control structures allow you to control the flow of your program based on conditions and repetition.\n\n## If Statements\n\n```python\nage = 18\n\nif age >= 18:\n    print('You are an adult')\nelif age >= 13:\n    print('You are a teenager')\nelse:\n    print('You are a child')\n```\n\n## Comparison Operators\n\n- `==` Equal to\n- `!=` Not equal to\n- `<` Less than\n- `>` Greater than\n- `<=` Less than or equal to\n- `>=` Greater than or equal to\n\n## Logical Operators\n\n- `and` - Both conditions must be true\n- `or` - At least one condition must be true\n- `not` - Inverts the condition\n\n## For Loops\n\n```python\n# Loop through a range\nfor i in range(5):\n    print(i)\n\n# Loop through a list\nfruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)\n```\n\n## While Loops\n\n```python\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1\n```",
        "examples": [
          {
            "title": "Control Structures Examples",
            "code": "# If statements example\nscore = 85\n\nif score >= 90:\n    grade = 'A'\nelif score >= 80:\n    grade = 'B'\nelif score >= 70:\n    grade = 'C'\nelif score >= 60:\n    grade = 'D'\nelse:\n    grade = 'F'\n\nprint(f'Score: {score}, Grade: {grade}')\n\n# For loop examples\nprint('\\nCounting to 5:')\nfor i in range(1, 6):\n    print(f'Count: {i}')\n\nprint('\\nSquares of numbers:')\nfor num in range(1, 6):\n    square = num ** 2\n    print(f'{num}Â² = {square}')\n\n# While loop example\nprint('\\nCountdown:')\ncountdown = 5\nwhile countdown > 0:\n    print(countdown)\n    countdown -= 1\nprint('Blast off!')\n\n# Nested loops example\nprint('\\nMultiplication table (1-3):')\nfor i in range(1, 4):\n    for j in range(1, 4):\n        result = i * j\n        print(f'{i} Ã— {j} = {result}')\n    print()  # Empty line between rows",
            "language": "python"
          }
        ]
      },
      "exercises": [
        {
          "id": "number-guessing-game",
          "title": "Number Guessing Game",
          "description": "Create a simple number guessing game using control structures",
          "starterCode": "# Number Guessing Game\n# The computer picks a number between 1 and 10\n# User has 3 attempts to guess it\n\nimport random\n\n# Generate random number between 1 and 10\nsecret_number = random.randint(1, 10)\nmax_attempts = 3\nattempts = 0\n\nprint('Welcome to the Number Guessing Game!')\nprint('I\\'m thinking of a number between 1 and 10.')\nprint(f'You have {max_attempts} attempts to guess it.')\n\n# Your game logic here:\n# Use a while loop for attempts\n# Use if statements to check guesses\n# Give hints (too high/too low)\n\n\n# End game message",
          "solution": "import random\n\n# Generate random number between 1 and 10\nsecret_number = random.randint(1, 10)\nmax_attempts = 3\nattempts = 0\nguessed_correctly = False\n\nprint('Welcome to the Number Guessing Game!')\nprint('I\\'m thinking of a number between 1 and 10.')\nprint(f'You have {max_attempts} attempts to guess it.')\n\nwhile attempts < max_attempts and not guessed_correctly:\n    attempts += 1\n    remaining = max_attempts - attempts + 1\n    \n    try:\n        guess = int(input(f'\\nAttempt {attempts}: Enter your guess: '))\n        \n        if guess == secret_number:\n            print(f'ðŸŽ‰ Congratulations! You guessed it in {attempts} attempts!')\n            guessed_correctly = True\n        elif guess < secret_number:\n            if remaining > 0:\n                print(f'Too low! {remaining} attempts remaining.')\n        else:  # guess > secret_number\n            if remaining > 0:\n                print(f'Too high! {remaining} attempts remaining.')\n                \n    except ValueError:\n        print('Please enter a valid number!')\n        attempts -= 1  # Don't count invalid input as an attempt\n\nif not guessed_correctly:\n    print(f'\\nðŸ˜” Game over! The number was {secret_number}.')\n    print('Better luck next time!')\n\nprint('\\nThanks for playing!')",
          "tests": [
            {
              "description": "Should use a while loop for game logic",
              "code": "True"  # This would need more complex testing in practice
            }
          ]
        }
      ],
      "quiz": [
        {
          "id": "q1",
          "type": "multiple-choice",
          "question": "What does the 'elif' keyword stand for in Python?",
          "options": ["else if", "element if", "error if", "end if"],
          "correctAnswer": 0,
          "explanation": "'elif' is short for 'else if' and is used for additional conditions in if statements."
        }
      ]
    },
    {
      "id": "functions-modules",
      "title": "Functions and Modules",
      "description": "Learn to create functions and use modules",
      "duration": 40,
      "concepts": [
        "Defining functions",
        "Parameters and arguments",
        "Return values",
        "Default parameters",
        "Variable scope",
        "Importing modules",
        "Creating modules"
      ],
      "content": {
        "text": "Functions are reusable blocks of code that perform specific tasks. Modules help organize and reuse code across different programs.\n\n## Defining Functions\n\n```python\ndef greet(name):\n    return f'Hello, {name}!'\n\n# Call the function\nmessage = greet('Alice')\nprint(message)\n```\n\n## Parameters and Arguments\n\n```python\n# Function with multiple parameters\ndef add_numbers(a, b):\n    return a + b\n\n# Function with default parameters\ndef greet_user(name, greeting='Hello'):\n    return f'{greeting}, {name}!'\n```\n\n## Variable Scope\n\n- **Local scope**: Variables inside functions\n- **Global scope**: Variables outside functions\n\n```python\nglobal_var = 'I am global'\n\ndef my_function():\n    local_var = 'I am local'\n    print(global_var)  # Can access global\n    print(local_var)   # Can access local\n```\n\n## Modules\n\nModules are files containing Python code that can be imported:\n\n```python\n# Import entire module\nimport math\nprint(math.pi)\n\n# Import specific functions\nfrom random import randint\nprint(randint(1, 10))\n```",
        "examples": [
          {
            "title": "Functions and Modules Examples",
            "code": "import math\nimport random\nfrom datetime import datetime\n\n# Function examples\ndef calculate_area(radius):\n    \"\"\"Calculate the area of a circle.\"\"\"\n    return math.pi * radius ** 2\n\ndef get_user_info(name, age, city='Unknown'):\n    \"\"\"Get formatted user information.\"\"\"\n    return {\n        'name': name,\n        'age': age,\n        'city': city,\n        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    }\n\ndef generate_password(length=8):\n    \"\"\"Generate a random password.\"\"\"\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\ndef fibonacci(n):\n    \"\"\"Generate Fibonacci sequence up to n terms.\"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    sequence = [0, 1]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n    \n    return sequence\n\n# Using the functions\nprint('=== Function Examples ===')\n\n# Circle area\nradius = 5\narea = calculate_area(radius)\nprint(f'Area of circle with radius {radius}: {area:.2f}')\n\n# User info\nuser = get_user_info('Alice', 25, 'New York')\nprint(f'User info: {user}')\n\n# Password generation\npassword = generate_password(12)\nprint(f'Generated password: {password}')\n\n# Fibonacci sequence\nfib_sequence = fibonacci(10)\nprint(f'First 10 Fibonacci numbers: {fib_sequence}')\n\n# Using built-in modules\nprint(f'\\nRandom number (1-100): {random.randint(1, 100)}')\nprint(f'Square root of 16: {math.sqrt(16)}')\nprint(f'Current time: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')",
            "language": "python"
          }
        ]
      },
      "exercises": [
        {
          "id": "calculator-functions",
          "title": "Advanced Calculator",
          "description": "Create a calculator with multiple functions using modules",
          "starterCode": "# Advanced Calculator\n# Create functions for different mathematical operations\n# Use the math module for advanced operations\n\nimport math\n\n# Basic operations\ndef add(a, b):\n    # Your code here\n    pass\n\ndef subtract(a, b):\n    # Your code here\n    pass\n\ndef multiply(a, b):\n    # Your code here\n    pass\n\ndef divide(a, b):\n    # Your code here (handle division by zero)\n    pass\n\n# Advanced operations using math module\ndef power(base, exponent):\n    # Your code here\n    pass\n\ndef square_root(number):\n    # Your code here (handle negative numbers)\n    pass\n\ndef factorial(n):\n    # Your code here (handle negative numbers)\n    pass\n\n# Main calculator function\ndef calculator():\n    # Create a simple menu system\n    # Your code here\n    pass\n\n# Test your functions\nprint('Testing calculator functions:')\nprint(f'5 + 3 = {add(5, 3)}')\nprint(f'10 - 4 = {subtract(10, 4)}')\nprint(f'6 * 7 = {multiply(6, 7)}')\nprint(f'15 / 3 = {divide(15, 3)}')\nprint(f'2^8 = {power(2, 8)}')\nprint(f'âˆš25 = {square_root(25)}')\nprint(f'5! = {factorial(5)}')",
          "solution": "import math\n\n# Basic operations\ndef add(a, b):\n    \"\"\"Add two numbers.\"\"\"\n    return a + b\n\ndef subtract(a, b):\n    \"\"\"Subtract b from a.\"\"\"\n    return a - b\n\ndef multiply(a, b):\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\ndef divide(a, b):\n    \"\"\"Divide a by b, handle division by zero.\"\"\"\n    if b == 0:\n        return \"Error: Division by zero!\"\n    return a / b\n\n# Advanced operations using math module\ndef power(base, exponent):\n    \"\"\"Raise base to the power of exponent.\"\"\"\n    return math.pow(base, exponent)\n\ndef square_root(number):\n    \"\"\"Calculate square root, handle negative numbers.\"\"\"\n    if number < 0:\n        return \"Error: Cannot calculate square root of negative number!\"\n    return math.sqrt(number)\n\ndef factorial(n):\n    \"\"\"Calculate factorial, handle negative numbers.\"\"\"\n    if n < 0:\n        return \"Error: Factorial is not defined for negative numbers!\"\n    if n == 0 or n == 1:\n        return 1\n    return math.factorial(n)\n\ndef sin_deg(degrees):\n    \"\"\"Calculate sine of angle in degrees.\"\"\"\n    radians = math.radians(degrees)\n    return math.sin(radians)\n\ndef cos_deg(degrees):\n    \"\"\"Calculate cosine of angle in degrees.\"\"\"\n    radians = math.radians(degrees)\n    return math.cos(radians)\n\n# Main calculator function\ndef calculator():\n    \"\"\"Interactive calculator menu.\"\"\"\n    print(\"\\n=== Advanced Calculator ===\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n    print(\"5. Power\")\n    print(\"6. Square Root\")\n    print(\"7. Factorial\")\n    print(\"8. Sine (degrees)\")\n    print(\"9. Cosine (degrees)\")\n    print(\"0. Exit\")\n    \n    while True:\n        try:\n            choice = int(input(\"\\nEnter your choice (0-9): \"))\n            \n            if choice == 0:\n                print(\"Thank you for using the calculator!\")\n                break\n            elif choice in [1, 2, 3, 4, 5]:\n                a = float(input(\"Enter first number: \"))\n                b = float(input(\"Enter second number: \"))\n                \n                if choice == 1:\n                    result = add(a, b)\n                elif choice == 2:\n                    result = subtract(a, b)\n                elif choice == 3:\n                    result = multiply(a, b)\n                elif choice == 4:\n                    result = divide(a, b)\n                elif choice == 5:\n                    result = power(a, b)\n                    \n                print(f\"Result: {result}\")\n                \n            elif choice in [6, 7, 8, 9]:\n                num = float(input(\"Enter number: \"))\n                \n                if choice == 6:\n                    result = square_root(num)\n                elif choice == 7:\n                    result = factorial(int(num))\n                elif choice == 8:\n                    result = sin_deg(num)\n                elif choice == 9:\n                    result = cos_deg(num)\n                    \n                print(f\"Result: {result}\")\n            else:\n                print(\"Invalid choice! Please try again.\")\n                \n        except ValueError:\n            print(\"Invalid input! Please enter a valid number.\")\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n\n# Test functions\nprint('Testing calculator functions:')\nprint(f'5 + 3 = {add(5, 3)}')\nprint(f'10 - 4 = {subtract(10, 4)}')\nprint(f'6 * 7 = {multiply(6, 7)}')\nprint(f'15 / 3 = {divide(15, 3)}')\nprint(f'2^8 = {power(2, 8)}')\nprint(f'âˆš25 = {square_root(25)}')\nprint(f'5! = {factorial(5)}')\nprint(f'sin(90Â°) = {sin_deg(90):.2f}')\nprint(f'cos(0Â°) = {cos_deg(0):.2f}')\n\n# Uncomment to run interactive calculator\n# calculator()",
          "tests": [
            {
              "description": "add function should work correctly",
              "code": "add(5, 3) == 8"
            },
            {
              "description": "divide function should handle division by zero",
              "code": "isinstance(divide(5, 0), str) and 'Error' in divide(5, 0)"
            }
          ]
        }
      ],
      "quiz": [
        {
          "id": "q1",
          "type": "multiple-choice",
          "question": "What keyword is used to define a function in Python?",
          "options": ["function", "def", "func", "define"],
          "correctAnswer": 1,
          "explanation": "The 'def' keyword is used to define functions in Python."
        }
      ]
    }
  ],
  "finalProject": {
    "title": "Personal Task Manager",
    "description": "Create a command-line task manager application using all Python concepts learned",
    "requirements": [
      "Use functions to organize code",
      "Implement task CRUD operations (Create, Read, Update, Delete)",
      "Use control structures for menu navigation",
      "Store tasks in lists/dictionaries",
      "Use modules (datetime for timestamps)",
      "Handle user input validation",
      "Provide a user-friendly interface"
    ],
    "starterCode": "# Personal Task Manager\n# A command-line application to manage your daily tasks\n\nimport datetime\n\n# Global task list\ntasks = []\n\ndef add_task():\n    \"\"\"Add a new task to the list.\"\"\"\n    # Your code here\n    pass\n\ndef view_tasks():\n    \"\"\"Display all tasks.\"\"\"\n    # Your code here\n    pass\n\ndef mark_complete():\n    \"\"\"Mark a task as complete.\"\"\"\n    # Your code here\n    pass\n\ndef delete_task():\n    \"\"\"Delete a task from the list.\"\"\"\n    # Your code here\n    pass\n\ndef main_menu():\n    \"\"\"Display the main menu and handle user choices.\"\"\"\n    # Your code here\n    pass\n\nif __name__ == \"__main__\":\n    main_menu()",
    "solution": "import datetime\n\n# Global task list\ntasks = []\n\ndef add_task():\n    \"\"\"Add a new task to the list.\"\"\"\n    title = input(\"Enter task title: \").strip()\n    if not title:\n        print(\"Task title cannot be empty!\")\n        return\n    \n    description = input(\"Enter task description (optional): \").strip()\n    \n    # Priority selection\n    print(\"Select priority:\")\n    print(\"1. Low\")\n    print(\"2. Medium\")\n    print(\"3. High\")\n    \n    try:\n        priority_choice = int(input(\"Enter choice (1-3): \"))\n        priority_map = {1: \"Low\", 2: \"Medium\", 3: \"High\"}\n        priority = priority_map.get(priority_choice, \"Medium\")\n    except ValueError:\n        priority = \"Medium\"\n    \n    task = {\n        'id': len(tasks) + 1,\n        'title': title,\n        'description': description,\n        'priority': priority,\n        'completed': False,\n        'created_at': datetime.datetime.now(),\n        'completed_at': None\n    }\n    \n    tasks.append(task)\n    print(f\"âœ“ Task '{title}' added successfully!\")\n\ndef view_tasks():\n    \"\"\"Display all tasks.\"\"\"\n    if not tasks:\n        print(\"No tasks found. Add some tasks first!\")\n        return\n    \n    print(\"\\n=== YOUR TASKS ===\")\n    print(f\"{'ID':<3} {'Title':<20} {'Priority':<8} {'Status':<10} {'Created':<12}\")\n    print(\"-\" * 65)\n    \n    for task in tasks:\n        status = \"âœ“ Complete\" if task['completed'] else \"â—‹ Pending\"\n        created = task['created_at'].strftime(\"%Y-%m-%d\")\n        \n        print(f\"{task['id']:<3} {task['title'][:20]:<20} {task['priority']:<8} {status:<10} {created:<12}\")\n        \n        if task['description']:\n            print(f\"    Description: {task['description']}\")\n        \n        if task['completed'] and task['completed_at']:\n            completed = task['completed_at'].strftime(\"%Y-%m-%d %H:%M\")\n            print(f\"    Completed: {completed}\")\n        \n        print()\n\ndef mark_complete():\n    \"\"\"Mark a task as complete.\"\"\"\n    if not tasks:\n        print(\"No tasks available to mark as complete.\")\n        return\n    \n    view_tasks()\n    \n    try:\n        task_id = int(input(\"Enter task ID to mark as complete: \"))\n        task = next((t for t in tasks if t['id'] == task_id), None)\n        \n        if task:\n            if task['completed']:\n                print(\"Task is already completed!\")\n            else:\n                task['completed'] = True\n                task['completed_at'] = datetime.datetime.now()\n                print(f\"âœ“ Task '{task['title']}' marked as complete!\")\n        else:\n            print(\"Task not found!\")\n            \n    except ValueError:\n        print(\"Please enter a valid task ID.\")\n\ndef delete_task():\n    \"\"\"Delete a task from the list.\"\"\"\n    if not tasks:\n        print(\"No tasks available to delete.\")\n        return\n    \n    view_tasks()\n    \n    try:\n        task_id = int(input(\"Enter task ID to delete: \"))\n        task = next((t for t in tasks if t['id'] == task_id), None)\n        \n        if task:\n            confirmation = input(f\"Are you sure you want to delete '{task['title']}'? (y/N): \")\n            if confirmation.lower() == 'y':\n                tasks.remove(task)\n                # Reassign IDs\n                for i, t in enumerate(tasks, 1):\n                    t['id'] = i\n                print(f\"âœ“ Task '{task['title']}' deleted successfully!\")\n            else:\n                print(\"Deletion cancelled.\")\n        else:\n            print(\"Task not found!\")\n            \n    except ValueError:\n        print(\"Please enter a valid task ID.\")\n\ndef show_statistics():\n    \"\"\"Show task statistics.\"\"\"\n    if not tasks:\n        print(\"No tasks to analyze.\")\n        return\n    \n    total_tasks = len(tasks)\n    completed_tasks = sum(1 for task in tasks if task['completed'])\n    pending_tasks = total_tasks - completed_tasks\n    \n    # Priority breakdown\n    priority_count = {'Low': 0, 'Medium': 0, 'High': 0}\n    for task in tasks:\n        priority_count[task['priority']] += 1\n    \n    print(\"\\n=== TASK STATISTICS ===\")\n    print(f\"Total tasks: {total_tasks}\")\n    print(f\"Completed: {completed_tasks}\")\n    print(f\"Pending: {pending_tasks}\")\n    print(f\"Completion rate: {(completed_tasks/total_tasks)*100:.1f}%\")\n    \n    print(\"\\nPriority breakdown:\")\n    for priority, count in priority_count.items():\n        print(f\"  {priority}: {count}\")\n\ndef filter_tasks():\n    \"\"\"Filter tasks by status or priority.\"\"\"\n    if not tasks:\n        print(\"No tasks to filter.\")\n        return\n    \n    print(\"\\nFilter options:\")\n    print(\"1. Show completed tasks\")\n    print(\"2. Show pending tasks\")\n    print(\"3. Show high priority tasks\")\n    print(\"4. Show medium priority tasks\")\n    print(\"5. Show low priority tasks\")\n    \n    try:\n        choice = int(input(\"Enter your choice (1-5): \"))\n        \n        filtered_tasks = []\n        \n        if choice == 1:\n            filtered_tasks = [t for t in tasks if t['completed']]\n            print(\"\\n=== COMPLETED TASKS ===\")\n        elif choice == 2:\n            filtered_tasks = [t for t in tasks if not t['completed']]\n            print(\"\\n=== PENDING TASKS ===\")\n        elif choice == 3:\n            filtered_tasks = [t for t in tasks if t['priority'] == 'High']\n            print(\"\\n=== HIGH PRIORITY TASKS ===\")\n        elif choice == 4:\n            filtered_tasks = [t for t in tasks if t['priority'] == 'Medium']\n            print(\"\\n=== MEDIUM PRIORITY TASKS ===\")\n        elif choice == 5:\n            filtered_tasks = [t for t in tasks if t['priority'] == 'Low']\n            print(\"\\n=== LOW PRIORITY TASKS ===\")\n        else:\n            print(\"Invalid choice!\")\n            return\n        \n        if filtered_tasks:\n            # Temporarily replace tasks list for viewing\n            original_tasks = tasks[:]\n            tasks[:] = filtered_tasks\n            view_tasks()\n            tasks[:] = original_tasks\n        else:\n            print(\"No tasks found matching the filter.\")\n            \n    except ValueError:\n        print(\"Please enter a valid choice.\")\n\ndef main_menu():\n    \"\"\"Display the main menu and handle user choices.\"\"\"\n    print(\"\\nðŸŽ¯ WELCOME TO PERSONAL TASK MANAGER ðŸŽ¯\")\n    print(\"Stay organized and boost your productivity!\")\n    \n    while True:\n        print(\"\\n=== MAIN MENU ===\")\n        print(\"1. Add Task\")\n        print(\"2. View All Tasks\")\n        print(\"3. Mark Task Complete\")\n        print(\"4. Delete Task\")\n        print(\"5. Filter Tasks\")\n        print(\"6. Show Statistics\")\n        print(\"7. Exit\")\n        \n        try:\n            choice = int(input(\"\\nEnter your choice (1-7): \"))\n            \n            if choice == 1:\n                add_task()\n            elif choice == 2:\n                view_tasks()\n            elif choice == 3:\n                mark_complete()\n            elif choice == 4:\n                delete_task()\n            elif choice == 5:\n                filter_tasks()\n            elif choice == 6:\n                show_statistics()\n            elif choice == 7:\n                print(\"\\nðŸ‘‹ Thank you for using Personal Task Manager!\")\n                print(\"Stay productive and have a great day!\")\n                break\n            else:\n                print(\"Invalid choice! Please enter a number between 1 and 7.\")\n                \n        except ValueError:\n            print(\"Invalid input! Please enter a number.\")\n        except KeyboardInterrupt:\n            print(\"\\n\\nGoodbye!\")\n            break\n\nif __name__ == \"__main__\":\n    main_menu()"
  },
  "resources": [
    {
      "title": "Python Official Tutorial",
      "url": "https://docs.python.org/3/tutorial/",
      "type": "documentation"
    },
    {
      "title": "Python for Beginners",
      "url": "https://www.python.org/about/gettingstarted/",
      "type": "tutorial"
    },
    {
      "title": "Automate the Boring Stuff with Python",
      "url": "https://automatetheboringstuff.com/",
      "type": "book"
    }
  ],
  "certificate": {
    "available": true,
    "requirements": {
      "completedLessons": 3,
      "passedQuizzes": 3,
      "completedExercises": 3,
      "finalProjectScore": 80
    }
  }
}